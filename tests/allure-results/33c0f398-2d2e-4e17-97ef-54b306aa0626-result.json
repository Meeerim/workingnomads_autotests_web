{"name": "test_validate_course", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 2.0s, while waiting for:\nbrowser.element(('css selector', '[@type=\"submit\"]')).click\n\nReason: InvalidSelectorException: Message: invalid selector: An invalid or illegal selector was specified\n  (Session info: chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00E7A813+48355]\n\t(No symbol) [0x00E0C4B1]\n\t(No symbol) [0x00D15358]\n\t(No symbol) [0x00D187A1]\n\t(No symbol) [0x00D199E1]\n\t(No symbol) [0x00D19A80]\n\t(No symbol) [0x00D4061C]\n\t(No symbol) [0x00D40B3B]\n\t(No symbol) [0x00D6E232]\n\t(No symbol) [0x00D5A784]\n\t(No symbol) [0x00D6C922]\n\t(No symbol) [0x00D5A536]\n\t(No symbol) [0x00D382DC]\n\t(No symbol) [0x00D393DD]\n\tGetHandleVerifier [0x010DAABD+2539405]\n\tGetHandleVerifier [0x0111A78F+2800735]\n\tGetHandleVerifier [0x0111456C+2775612]\n\tGetHandleVerifier [0x00F051E0+616112]\n\t(No symbol) [0x00E15F8C]\n\t(No symbol) [0x00E12328]\n\t(No symbol) [0x00E1240B]\n\t(No symbol) [0x00E04FF7]\n\tBaseThreadInitThunk [0x761B7D59+25]\n\tRtlInitializeExceptionChain [0x779AB74B+107]\n\tRtlClearBits [0x779AB6CF+191]\n\nScreenshot: file://C:\\Users\\skmee\\.selene\\screenshots\\1689094732331\\1689094732331.png\nPageSource: file://C:\\Users\\skmee\\.selene\\screenshots\\1689094732331\\1689094732331.html", "trace": "fn = <selene.core.wait.Command object at 0x0000018FE1F4D250>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Command object at 0x0000018FE1F4D250>\nentity = <selene.core.entity.Element object at 0x0000018FE09DE290>\n\n    def __call__(self, entity: E) -> R:\n>       return self._fn(entity)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selene.core.entity.Element object at 0x0000018FE09DE290>\n\n    def raw_click(element: Element):\n>       element.locate().click()\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\entity.py:529: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.entity.Element object at 0x0000018FE09DE290>\n\n    def locate(self) -> WebElement:\n>       return self._locator()\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\entity.py:189: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.locator.Locator object at 0x0000018FE0D1DC10>\n\n    def __call__(self) -> T:\n>       return self._locate()\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\locator.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\n>       Locator(f'{self}.element({by})', lambda: self.driver.find_element(*by)),\n        self.config,\n    )\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\entity.py:1132: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b061983d700cd199088539d334641ce\")>\nby = 'css selector', value = '[@type=\"submit\"]'\n\n    def find_element(self, by=By.ID, value: Optional[str] = None) -> WebElement:\n        \"\"\"Find an element given a By strategy and locator.\n    \n        :Usage:\n            ::\n    \n                element = driver.find_element(By.ID, 'foo')\n    \n        :rtype: WebElement\n        \"\"\"\n        if isinstance(by, RelativeBy):\n            elements = self.find_elements(by=by, value=value)\n            if not elements:\n                raise NoSuchElementException(f\"Cannot locate relative element with: {by.root}\")\n            return elements[0]\n    \n        if by == By.ID:\n            by = By.CSS_SELECTOR\n            value = f'[id=\"{value}\"]'\n        elif by == By.CLASS_NAME:\n            by = By.CSS_SELECTOR\n            value = f\".{value}\"\n        elif by == By.NAME:\n            by = By.CSS_SELECTOR\n            value = f'[name=\"{value}\"]'\n    \n>       return self.execute(Command.FIND_ELEMENT, {\"using\": by, \"value\": value})[\"value\"]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:831: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"9b061983d700cd199088539d334641ce\")>\ndriver_command = 'findElement'\nparams = {'using': 'css selector', 'value': '[@type=\"submit\"]'}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000018FE1F5ABD0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid selector\",\"message\":\"invalid selector: An invalid or illegal sele...dInitThunk [0x761B7D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x779AB74B+107]\\\\n\\\\tRtlClearBits [0x779AB6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidSelectorException: Message: invalid selector: An invalid or illegal selector was specified\nE         (Session info: chrome=114.0.5735.199)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00E7A813+48355]\nE       \t(No symbol) [0x00E0C4B1]\nE       \t(No symbol) [0x00D15358]\nE       \t(No symbol) [0x00D187A1]\nE       \t(No symbol) [0x00D199E1]\nE       \t(No symbol) [0x00D19A80]\nE       \t(No symbol) [0x00D4061C]\nE       \t(No symbol) [0x00D40B3B]\nE       \t(No symbol) [0x00D6E232]\nE       \t(No symbol) [0x00D5A784]\nE       \t(No symbol) [0x00D6C922]\nE       \t(No symbol) [0x00D5A536]\nE       \t(No symbol) [0x00D382DC]\nE       \t(No symbol) [0x00D393DD]\nE       \tGetHandleVerifier [0x010DAABD+2539405]\nE       \tGetHandleVerifier [0x0111A78F+2800735]\nE       \tGetHandleVerifier [0x0111456C+2775612]\nE       \tGetHandleVerifier [0x00F051E0+616112]\nE       \t(No symbol) [0x00E15F8C]\nE       \t(No symbol) [0x00E12328]\nE       \t(No symbol) [0x00E1240B]\nE       \t(No symbol) [0x00E04FF7]\nE       \tBaseThreadInitThunk [0x761B7D59+25]\nE       \tRtlInitializeExceptionChain [0x779AB74B+107]\nE       \tRtlClearBits [0x779AB6CF+191]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: InvalidSelectorException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.tag(\"web\")\n    @allure.severity(Severity.CRITICAL)\n    @allure.feature(f'Python Course Content')\n    @allure.story('Validate the course content of a free course about Python programming for beginners')\n    def test_validate_course():\n        with allure.step('Successful login'):\n            app.user_log_in.open() \\\n                .fill_email(user.email) \\\n                .fill_password(user.password) \\\n>               .login_button()\n\ntest_login.py:31: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\udemy_autotests_web\\model\\pages\\user_log_in_page.py:22: in login_button\n    browser.element('[@type=\"submit\"]').click()\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\entity.py:533: in click\n    self.wait.for_(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x0000018FE1F4D250>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 2.0s, while waiting for:\nE                   browser.element(('css selector', '[@type=\"submit\"]')).click\nE                   \nE                   Reason: InvalidSelectorException: Message: invalid selector: An invalid or illegal selector was specified\nE                     (Session info: chrome=114.0.5735.199)\nE                   Stacktrace:\nE                   Backtrace:\nE                   \tGetHandleVerifier [0x00E7A813+48355]\nE                   \t(No symbol) [0x00E0C4B1]\nE                   \t(No symbol) [0x00D15358]\nE                   \t(No symbol) [0x00D187A1]\nE                   \t(No symbol) [0x00D199E1]\nE                   \t(No symbol) [0x00D19A80]\nE                   \t(No symbol) [0x00D4061C]\nE                   \t(No symbol) [0x00D40B3B]\nE                   \t(No symbol) [0x00D6E232]\nE                   \t(No symbol) [0x00D5A784]\nE                   \t(No symbol) [0x00D6C922]\nE                   \t(No symbol) [0x00D5A536]\nE                   \t(No symbol) [0x00D382DC]\nE                   \t(No symbol) [0x00D393DD]\nE                   \tGetHandleVerifier [0x010DAABD+2539405]\nE                   \tGetHandleVerifier [0x0111A78F+2800735]\nE                   \tGetHandleVerifier [0x0111456C+2775612]\nE                   \tGetHandleVerifier [0x00F051E0+616112]\nE                   \t(No symbol) [0x00E15F8C]\nE                   \t(No symbol) [0x00E12328]\nE                   \t(No symbol) [0x00E1240B]\nE                   \t(No symbol) [0x00E04FF7]\nE                   \tBaseThreadInitThunk [0x761B7D59+25]\nE                   \tRtlInitializeExceptionChain [0x779AB74B+107]\nE                   \tRtlClearBits [0x779AB6CF+191]\nE                   \nE                   Screenshot: file://C:\\Users\\skmee\\.selene\\screenshots\\1689094732331\\1689094732331.png\nE                   PageSource: file://C:\\Users\\skmee\\.selene\\screenshots\\1689094732331\\1689094732331.html\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py:141: TimeoutException"}, "steps": [{"name": "Successful login", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 2.0s, while waiting for:\nbrowser.element(('css selector', '[@type=\"submit\"]')).click\n\nReason: InvalidSelectorException: Message: invalid selector: An invalid or illegal selector was specified\n  (Session info: chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00E7A813+48355]\n\t(No symbol) [0x00E0C4B1]\n\t(No symbol) [0x00D15358]\n\t(No symbol) [0x00D187A1]\n\t(No symbol) [0x00D199E1]\n\t(No symbol) [0x00D19A80]\n\t(No symbol) [0x00D4061C]\n\t(No symbol) [0x00D40B3B]\n\t(No symbol) [0x00D6E232]\n\t(No symbol) [0x00D5A784]\n\t(No symbol) [0x00D6C922]\n\t(No symbol) [0x00D5A536]\n\t(No symbol) [0x00D382DC]\n\t(No symbol) [0x00D393DD]\n\tGetHandleVerifier [0x010DAABD+2539405]\n\tGetHandleVerifier [0x0111A78F+2800735]\n\tGetHandleVerifier [0x0111456C+2775612]\n\tGetHandleVerifier [0x00F051E0+616112]\n\t(No symbol) [0x00E15F8C]\n\t(No symbol) [0x00E12328]\n\t(No symbol) [0x00E1240B]\n\t(No symbol) [0x00E04FF7]\n\tBaseThreadInitThunk [0x761B7D59+25]\n\tRtlInitializeExceptionChain [0x779AB74B+107]\n\tRtlClearBits [0x779AB6CF+191]\n\nScreenshot: file://C:\\Users\\skmee\\.selene\\screenshots\\1689094732331\\1689094732331.png\nPageSource: file://C:\\Users\\skmee\\.selene\\screenshots\\1689094732331\\1689094732331.html\n\n", "trace": "  File \"C:\\Users\\skmee\\PycharmProjects\\udemy_autotests_web\\tests\\test_login.py\", line 31, in test_validate_course\n    .login_button()\n     ^^^^^^^^^^^^^^\n  File \"C:\\Users\\skmee\\PycharmProjects\\udemy_autotests_web\\udemy_autotests_web\\model\\pages\\user_log_in_page.py\", line 22, in login_button\n    browser.element('[@type=\"submit\"]').click()\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\entity.py\", line 533, in click\n    self.wait.for_(\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py\", line 143, in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py\", line 141, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1689094732503, "stop": 1689094747575}], "start": 1689094732503, "stop": 1689094747628, "uuid": "7ed948fc-3791-4691-8566-960526d53b85", "historyId": "dba47dcda928b8a1c209e8104789cdaf", "testCaseId": "c6f6a3d89346551cc3ce81a1c131407c", "fullName": "tests.test_login#test_validate_course", "labels": [{"name": "story", "value": "Validate the course content of a free course about Python programming for beginners"}, {"name": "tag", "value": "web"}, {"name": "severity", "value": "critical"}, {"name": "feature", "value": "Python Course Content"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "LAPTOP-OFQSKCIR"}, {"name": "thread", "value": "8248-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}