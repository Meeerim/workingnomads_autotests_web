{"name": "test_edit_account", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55a546637013 <unknown>\n#1 0x55a546399a08 <unknown>\n#2 0x55a5463cffb6 <unknown>\n#3 0x55a5463d0171 <unknown>\n#4 0x55a546402dd4 <unknown>\n#5 0x55a5463ed95d <unknown>\n#6 0x55a546400b94 <unknown>\n#7 0x55a5463ed823 <unknown>\n#8 0x55a5463c308a <unknown>\n#9 0x55a5463c41e5 <unknown>\n#10 0x55a546664e5d <unknown>\n#11 0x55a54667e061 <unknown>\n#12 0x55a546666bb5 <unknown>\n#13 0x55a54667ee08 <unknown>\n#14 0x55a54665a2f0 <unknown>\n#15 0x55a54669a988 <unknown>\n#16 0x55a54669ab08 <unknown>\n#17 0x55a5466b45dd <unknown>\n#18 0x7fa4a660c609 <unknown>", "trace": "request = <SubRequest 'setup_browser' for <Function test_edit_account>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup_browser(request):\n        browser_version = request.config.getoption('--browser_version')\n        browser_version = browser_version if browser_version != \"\" else DEFAULT_BROWSER_VERSION\n        options = Options()\n        selenoid_capabilities = {\n            \"browserName\": \"chrome\",\n            \"browserVersion\": browser_version,\n            \"selenoid:options\": {\n                \"enableVNC\": True,\n                \"enableVideo\": True,\n            }\n        }\n        options.capabilities.update(selenoid_capabilities)\n        login = os.getenv('LOGIN')\n        password = os.getenv('PASSWORD')\n        driver = webdriver.Remote(\n            command_executor=f'https://{login}:{password}@selenoid.autotests.cloud/wd/hub',\n            options=options\n        )\n        browser.config.driver = driver\n    \n        browser.config.timeout = 60\n        browser.config.window_width = 1200\n        browser.config.window_height = 800\n        browser.config.base_url = 'https://www.workingnomads.com'\n        cookie_notification_text = \"We value your privacy\"\n    \n        # Find the element that contains the notification text\n>       notification_element = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.XPATH, f\"//*[contains(text(), '{cookie_notification_text}')]\"))\n        )\n\ntests\\conftest.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"35ee26bbf0a44dbf746d95dd37290ea9\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x00000257A5719DA0>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55a546637013 <unknown>\nE       #1 0x55a546399a08 <unknown>\nE       #2 0x55a5463cffb6 <unknown>\nE       #3 0x55a5463d0171 <unknown>\nE       #4 0x55a546402dd4 <unknown>\nE       #5 0x55a5463ed95d <unknown>\nE       #6 0x55a546400b94 <unknown>\nE       #7 0x55a5463ed823 <unknown>\nE       #8 0x55a5463c308a <unknown>\nE       #9 0x55a5463c41e5 <unknown>\nE       #10 0x55a546664e5d <unknown>\nE       #11 0x55a54667e061 <unknown>\nE       #12 0x55a546666bb5 <unknown>\nE       #13 0x55a54667ee08 <unknown>\nE       #14 0x55a54665a2f0 <unknown>\nE       #15 0x55a54669a988 <unknown>\nE       #16 0x55a54669ab08 <unknown>\nE       #17 0x55a5466b45dd <unknown>\nE       #18 0x7fa4a660c609 <unknown>\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException"}, "start": 1690018137882, "stop": 1690018137882, "uuid": "da337ad3-7f8a-43ca-a363-d478c2cb9f8b", "historyId": "2e80ea03e3048fae56c8f47a13eb1125", "testCaseId": "a6c6f7d3e183cc6398b129e192630e0f", "fullName": "tests.test_account_setting#test_edit_account", "labels": [{"name": "feature", "value": "Edit account"}, {"name": "tag", "value": "web"}, {"name": "story", "value": "Go to account page and fill first and last names of account"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_account_setting"}, {"name": "host", "value": "LAPTOP-OFQSKCIR"}, {"name": "thread", "value": "7148-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_account_setting"}]}