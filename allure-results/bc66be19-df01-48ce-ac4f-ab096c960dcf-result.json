{"name": "test_unsuccessful_login", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x563d40041013 <unknown>\n#1 0x563d3fda3a08 <unknown>\n#2 0x563d3fdd9fb6 <unknown>\n#3 0x563d3fdda171 <unknown>\n#4 0x563d3fe0cdd4 <unknown>\n#5 0x563d3fdf795d <unknown>\n#6 0x563d3fe0ab94 <unknown>\n#7 0x563d3fdf7823 <unknown>\n#8 0x563d3fdcd08a <unknown>\n#9 0x563d3fdce1e5 <unknown>\n#10 0x563d4006ee5d <unknown>\n#11 0x563d40088061 <unknown>\n#12 0x563d40070bb5 <unknown>\n#13 0x563d40088e08 <unknown>\n#14 0x563d400642f0 <unknown>\n#15 0x563d400a4988 <unknown>\n#16 0x563d400a4b08 <unknown>\n#17 0x563d400be5dd <unknown>\n#18 0x7f17140df609 <unknown>", "trace": "request = <SubRequest 'setup_browser' for <Function test_unsuccessful_login>>\n\n    @pytest.fixture(scope=\"function\", autouse=True)\n    def setup_browser(request):\n        browser_version = request.config.getoption('--browser_version')\n        browser_version = browser_version if browser_version != \"\" else DEFAULT_BROWSER_VERSION\n        options = Options()\n        selenoid_capabilities = {\n            \"browserName\": \"chrome\",\n            \"browserVersion\": browser_version,\n            \"selenoid:options\": {\n                \"enableVNC\": True,\n                \"enableVideo\": True,\n            }\n        }\n        options.capabilities.update(selenoid_capabilities)\n        login = os.getenv('LOGIN')\n        password = os.getenv('PASSWORD')\n        driver = webdriver.Remote(\n            command_executor=f'https://{login}:{password}@selenoid.autotests.cloud/wd/hub',\n            options=options\n        )\n        browser.config.driver = driver\n    \n        browser.config.timeout = 60\n        browser.config.window_width = 1200\n        browser.config.window_height = 800\n        browser.config.base_url = 'https://www.workingnomads.com'\n        cookie_notification_text = \"We value your privacy\"\n    \n        # Find the element that contains the notification text\n>       notification_element = WebDriverWait(driver, 10).until(\n            EC.presence_of_element_located((By.XPATH, f\"//*[contains(text(), '{cookie_notification_text}')]\"))\n        )\n\ntests\\conftest.py:70: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"7186c06c73e332f43324e2c951dcd53f\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x00000257A57B0680>, message = ''\n\n    def until(self, method, message: str = \"\"):\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x563d40041013 <unknown>\nE       #1 0x563d3fda3a08 <unknown>\nE       #2 0x563d3fdd9fb6 <unknown>\nE       #3 0x563d3fdda171 <unknown>\nE       #4 0x563d3fe0cdd4 <unknown>\nE       #5 0x563d3fdf795d <unknown>\nE       #6 0x563d3fe0ab94 <unknown>\nE       #7 0x563d3fdf7823 <unknown>\nE       #8 0x563d3fdcd08a <unknown>\nE       #9 0x563d3fdce1e5 <unknown>\nE       #10 0x563d4006ee5d <unknown>\nE       #11 0x563d40088061 <unknown>\nE       #12 0x563d40070bb5 <unknown>\nE       #13 0x563d40088e08 <unknown>\nE       #14 0x563d400642f0 <unknown>\nE       #15 0x563d400a4988 <unknown>\nE       #16 0x563d400a4b08 <unknown>\nE       #17 0x563d400be5dd <unknown>\nE       #18 0x7f17140df609 <unknown>\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:95: TimeoutException"}, "start": 1690018191548, "stop": 1690018191548, "uuid": "d89199a6-da13-47f4-a6bc-6a36705676d5", "historyId": "0ab50b7cc9d109ccbed21afe47d8c9e9", "testCaseId": "64fa320f84ca13fdf7a1ce2c29801c22", "fullName": "tests.test_login#test_unsuccessful_login", "labels": [{"name": "feature", "value": "Login with invalid data"}, {"name": "tag", "value": "web"}, {"name": "story", "value": "Checking if an error is displayed when entering a password that is not in the system"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "LAPTOP-OFQSKCIR"}, {"name": "thread", "value": "7148-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}