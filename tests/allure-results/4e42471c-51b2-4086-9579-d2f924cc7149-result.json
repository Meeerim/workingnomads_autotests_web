{"name": "test_unsuccessful_login", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '.helpers--auth-alert-error--EmPbB')).has texts ('There was a problem logging in.',)\n\nReason: TypeError: 'WebElement' object is not iterable\nScreenshot: file://C:\\Users\\skmee\\.selene\\screenshots\\1689019021173\\1689019021173.png\nPageSource: file://C:\\Users\\skmee\\.selene\\screenshots\\1689019021173\\1689019021173.html", "trace": "fn = <selene.core.conditions.CollectionCondition object at 0x000001D7258DA8D0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.conditions.CollectionCondition object at 0x000001D7258DA8D0>\nentity = <selene.core.entity.Element object at 0x000001D7256E01D0>\n\n    def __call__(self, entity: E) -> None:\n>       return self._fn(entity)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\condition.py:173: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nentity = <selene.core.entity.Element object at 0x000001D7256E01D0>\n\n    def fn(entity: E) -> None:\n        query_to_str = str(query)\n        result = (\n            query.__name__ if query_to_str.startswith('<function') else query_to_str\n        )\n>       actual = query(entity)\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\condition.py:144: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\ncollection = <selene.core.entity.Element object at 0x000001D7256E01D0>\n\n    def visible_texts(collection: Collection) -> List[str]:\n>       return [\n            webelement.text for webelement in collection() if webelement.is_displayed()\n        ]\nE       TypeError: 'WebElement' object is not iterable\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\match.py:367: TypeError\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.tag(\"web\")\n    @allure.severity(Severity.CRITICAL)\n    @allure.feature(f'Authorization check with invalid data')\n    @allure.story(\"Checking if an error is displayed when entering an email and password that is not in the system\")\n    def test_unsuccessful_login():\n        with allure.step('Select login and enter an invalid username and password'):\n            app.user_log_in.open() \\\n                .fill_incorrect_email(user.wrong_email) \\\n                .fill_password(user.password) \\\n                .login_button()\n        with allure.step('Check for an expected error'):\n>           app.user_log_in.check_for_an_error()\n\ntest_login.py:19: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\udemy_autotests_web\\model\\pages\\user_log_in_page.py:27: in check_for_an_error\n    browser.element('.helpers--auth-alert-error--EmPbB').should(\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\entity.py:136: in should\n    self.wait.for_(condition)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.conditions.CollectionCondition object at 0x000001D7258DA8D0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 4s, while waiting for:\nE                   browser.element(('css selector', '.helpers--auth-alert-error--EmPbB')).has texts ('There was a problem logging in.',)\nE                   \nE                   Reason: TypeError: 'WebElement' object is not iterable\nE                   Screenshot: file://C:\\Users\\skmee\\.selene\\screenshots\\1689019021173\\1689019021173.png\nE                   PageSource: file://C:\\Users\\skmee\\.selene\\screenshots\\1689019021173\\1689019021173.html\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py:141: TimeoutException"}, "steps": [{"name": "Select login and enter an invalid username and password", "status": "passed", "start": 1689019021377, "stop": 1689019032339}, {"name": "Check for an expected error", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 4s, while waiting for:\nbrowser.element(('css selector', '.helpers--auth-alert-error--EmPbB')).has texts ('There was a problem logging in.',)\n\nReason: TypeError: 'WebElement' object is not iterable\nScreenshot: file://C:\\Users\\skmee\\.selene\\screenshots\\1689019021173\\1689019021173.png\nPageSource: file://C:\\Users\\skmee\\.selene\\screenshots\\1689019021173\\1689019021173.html\n\n", "trace": "  File \"C:\\Users\\skmee\\PycharmProjects\\udemy_autotests_web\\tests\\test_login.py\", line 19, in test_unsuccessful_login\n    app.user_log_in.check_for_an_error()\n  File \"C:\\Users\\skmee\\PycharmProjects\\udemy_autotests_web\\udemy_autotests_web\\model\\pages\\user_log_in_page.py\", line 27, in check_for_an_error\n    browser.element('.helpers--auth-alert-error--EmPbB').should(\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\entity.py\", line 136, in should\n    self.wait.for_(condition)\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py\", line 143, in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py\", line 141, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1689019032339, "stop": 1689019036578}], "start": 1689019021377, "stop": 1689019036585, "uuid": "05e4ce87-f1e6-433c-8e68-fa65a9d571c6", "historyId": "0ab50b7cc9d109ccbed21afe47d8c9e9", "testCaseId": "64fa320f84ca13fdf7a1ce2c29801c22", "fullName": "tests.test_login#test_unsuccessful_login", "labels": [{"name": "tag", "value": "web"}, {"name": "severity", "value": "critical"}, {"name": "story", "value": "Checking if an error is displayed when entering an email and password that is not in the system"}, {"name": "feature", "value": "Authorization check with invalid data"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "LAPTOP-OFQSKCIR"}, {"name": "thread", "value": "16916-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}