{"name": "test_bookmark_job", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\n  (Session info: chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x0091A813+48355]\n\t(No symbol) [0x008AC4B1]\n\t(No symbol) [0x007B5220]\n\t(No symbol) [0x007A88E2]\n\t(No symbol) [0x007A7138]\n\t(No symbol) [0x007A7688]\n\t(No symbol) [0x007B6B52]\n\t(No symbol) [0x0080CF01]\n\t(No symbol) [0x007FA73C]\n\t(No symbol) [0x0080C922]\n\t(No symbol) [0x007FA536]\n\t(No symbol) [0x007D82DC]\n\t(No symbol) [0x007D93DD]\n\tGetHandleVerifier [0x00B7AABD+2539405]\n\tGetHandleVerifier [0x00BBA78F+2800735]\n\tGetHandleVerifier [0x00BB456C+2775612]\n\tGetHandleVerifier [0x009A51E0+616112]\n\t(No symbol) [0x008B5F8C]\n\t(No symbol) [0x008B2328]\n\t(No symbol) [0x008B240B]\n\t(No symbol) [0x008A4FF7]\n\tBaseThreadInitThunk [0x76AD7D59+25]\n\tRtlInitializeExceptionChain [0x77BAB79B+107]\n\tRtlClearBits [0x77BAB71F+191]", "trace": "@pytest.fixture(scope=\"session\")\n    def login():\n>       app.user_log_in.open() \\\n            .fill_email(user.email) \\\n            .fill_password(user.password) \\\n            .login_button()\n\nconftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\udemy_autotests_web\\model\\pages\\user_log_in_page.py:6: in open\n    browser.open('/users/sign_in')\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\entity.py:1154: in open\n    self.config._executor.get_url(relative_or_absolute_url)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\configuration.py:303: in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\configuration.py:255: in get\n    driver.get(url)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:449: in get\n    self.execute(Command.GET, {\"url\": url})\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002BD79F47E10>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"invalid argument\",\"message\":\"invalid argument\\\\n  (Session info: chrome=1...dInitThunk [0x76AD7D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x77BAB79B+107]\\\\n\\\\tRtlClearBits [0x77BAB71F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.InvalidArgumentException: Message: invalid argument\nE         (Session info: chrome=114.0.5735.199)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x0091A813+48355]\nE       \t(No symbol) [0x008AC4B1]\nE       \t(No symbol) [0x007B5220]\nE       \t(No symbol) [0x007A88E2]\nE       \t(No symbol) [0x007A7138]\nE       \t(No symbol) [0x007A7688]\nE       \t(No symbol) [0x007B6B52]\nE       \t(No symbol) [0x0080CF01]\nE       \t(No symbol) [0x007FA73C]\nE       \t(No symbol) [0x0080C922]\nE       \t(No symbol) [0x007FA536]\nE       \t(No symbol) [0x007D82DC]\nE       \t(No symbol) [0x007D93DD]\nE       \tGetHandleVerifier [0x00B7AABD+2539405]\nE       \tGetHandleVerifier [0x00BBA78F+2800735]\nE       \tGetHandleVerifier [0x00BB456C+2775612]\nE       \tGetHandleVerifier [0x009A51E0+616112]\nE       \t(No symbol) [0x008B5F8C]\nE       \t(No symbol) [0x008B2328]\nE       \t(No symbol) [0x008B240B]\nE       \t(No symbol) [0x008A4FF7]\nE       \tBaseThreadInitThunk [0x76AD7D59+25]\nE       \tRtlInitializeExceptionChain [0x77BAB79B+107]\nE       \tRtlClearBits [0x77BAB71F+191]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: InvalidArgumentException"}, "attachments": [{"name": "stderr", "source": "46c80044-a1f5-46f1-b2e6-5f758dd65ef9-attachment.txt", "type": "text/plain"}], "start": 1689500588997, "stop": 1689500588997, "uuid": "20d4a0e4-75ff-4266-b5d5-28d111c500e9", "historyId": "45125bd1a87fee0039ea6640587c5815", "testCaseId": "26389278e94a97283df77bb20091559b", "fullName": "tests.test_job_bookmarks#test_bookmark_job", "labels": [{"name": "feature", "value": "Bookmark"}, {"name": "story", "value": "First filter out jobs and add one of them to bookmarks"}, {"name": "tag", "value": "web"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_job_bookmarks"}, {"name": "host", "value": "LAPTOP-OFQSKCIR"}, {"name": "thread", "value": "19776-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_job_bookmarks"}]}