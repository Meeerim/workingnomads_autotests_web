{"name": "test_with_invalid_email", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00DCA813+48355]\n\t(No symbol) [0x00D5C4B1]\n\t(No symbol) [0x00C65358]\n\t(No symbol) [0x00C57D96]\n\t(No symbol) [0x00C57AB9]\n\t(No symbol) [0x00C667C0]\n\t(No symbol) [0x00CBC4D8]\n\t(No symbol) [0x00CAA536]\n\t(No symbol) [0x00C882DC]\n\t(No symbol) [0x00C893DD]\n\tGetHandleVerifier [0x0102AABD+2539405]\n\tGetHandleVerifier [0x0106A78F+2800735]\n\tGetHandleVerifier [0x0106456C+2775612]\n\tGetHandleVerifier [0x00E551E0+616112]\n\t(No symbol) [0x00D65F8C]\n\t(No symbol) [0x00D62328]\n\t(No symbol) [0x00D6240B]\n\t(No symbol) [0x00D54FF7]\n\tBaseThreadInitThunk [0x75D37D59+25]\n\tRtlInitializeExceptionChain [0x771CB79B+107]\n\tRtlClearBits [0x771CB71F+191]", "trace": "@allure.tag(\"web\")\n    @allure.feature(f'Signing up with invalid credentials')\n    @allure.story(\"Verify that an appropriate error message is displayed and still on same url\")\n    def test_with_invalid_email():\n        with allure.step('Sign up with registered email address'):\n>           app.user_sign_up.open(). \\\n                fill_email(user.email) \\\n                .fill_password(user.password) \\\n                .reenter_password(user.password) \\\n                .agree_with_terms() \\\n                .agree_with_policy() \\\n                .sign_up_button()\n\ntests\\test_signup.py:11: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nworkingnomads_autotests_web\\model\\pages\\user_sing_up_page.py:7: in open\n    browser.open('/users/sign_up')\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\entity.py:1154: in open\n    self.config._executor.get_url(relative_or_absolute_url)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\configuration.py:303: in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\configuration.py:244: in get\n    driver.set_window_size(int(width), int(height))\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:954: in set_window_size\n    self.set_window_rect(width=int(width), height=int(height))\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:1033: in set_window_rect\n    return self.execute(Command.SET_WINDOW_RECT, {\"x\": x, \"y\": y, \"width\": width, \"height\": height})[\"value\"]\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020D84A7B950>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"disconnected\",\"message\":\"disconnected: not connected to DevTools\\\\n  (fai...dInitThunk [0x75D37D59+25]\\\\n\\\\tRtlInitializeExceptionChain [0x771CB79B+107]\\\\n\\\\tRtlClearBits [0x771CB71F+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\nE         (failed to check if window was closed: disconnected: not connected to DevTools)\nE         (Session info: chrome=114.0.5735.199)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x00DCA813+48355]\nE       \t(No symbol) [0x00D5C4B1]\nE       \t(No symbol) [0x00C65358]\nE       \t(No symbol) [0x00C57D96]\nE       \t(No symbol) [0x00C57AB9]\nE       \t(No symbol) [0x00C667C0]\nE       \t(No symbol) [0x00CBC4D8]\nE       \t(No symbol) [0x00CAA536]\nE       \t(No symbol) [0x00C882DC]\nE       \t(No symbol) [0x00C893DD]\nE       \tGetHandleVerifier [0x0102AABD+2539405]\nE       \tGetHandleVerifier [0x0106A78F+2800735]\nE       \tGetHandleVerifier [0x0106456C+2775612]\nE       \tGetHandleVerifier [0x00E551E0+616112]\nE       \t(No symbol) [0x00D65F8C]\nE       \t(No symbol) [0x00D62328]\nE       \t(No symbol) [0x00D6240B]\nE       \t(No symbol) [0x00D54FF7]\nE       \tBaseThreadInitThunk [0x75D37D59+25]\nE       \tRtlInitializeExceptionChain [0x771CB79B+107]\nE       \tRtlClearBits [0x771CB71F+191]\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: WebDriverException"}, "steps": [{"name": "Sign up with registered email address", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: disconnected: not connected to DevTools\n  (failed to check if window was closed: disconnected: not connected to DevTools)\n  (Session info: chrome=114.0.5735.199)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x00DCA813+48355]\n\t(No symbol) [0x00D5C4B1]\n\t(No symbol) [0x00C65358]\n\t(No symbol) [0x00C57D96]\n\t(No symbol) [0x00C57AB9]\n\t(No symbol) [0x00C667C0]\n\t(No symbol) [0x00CBC4D8]\n\t(No symbol) [0x00CAA536]\n\t(No symbol) [0x00C882DC]\n\t(No symbol) [0x00C893DD]\n\tGetHandleVerifier [0x0102AABD+2539405]\n\tGetHandleVerifier [0x0106A78F+2800735]\n\tGetHandleVerifier [0x0106456C+2775612]\n\tGetHandleVerifier [0x00E551E0+616112]\n\t(No symbol) [0x00D65F8C]\n\t(No symbol) [0x00D62328]\n\t(No symbol) [0x00D6240B]\n\t(No symbol) [0x00D54FF7]\n\tBaseThreadInitThunk [0x75D37D59+25]\n\tRtlInitializeExceptionChain [0x771CB79B+107]\n\tRtlClearBits [0x771CB71F+191]\n\n", "trace": "  File \"C:\\Users\\skmee\\PycharmProjects\\workingnomads_autotests_web\\tests\\test_signup.py\", line 11, in test_with_invalid_email\n    app.user_sign_up.open(). \\\n    ^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\skmee\\PycharmProjects\\workingnomads_autotests_web\\workingnomads_autotests_web\\model\\pages\\user_sing_up_page.py\", line 7, in open\n    browser.open('/users/sign_up')\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\entity.py\", line 1154, in open\n    self.config._executor.get_url(relative_or_absolute_url)\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\configuration.py\", line 303, in get_url\n    self.config._driver_get_url_strategy(self.config)(url)\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\configuration.py\", line 244, in get\n    driver.set_window_size(int(width), int(height))\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 954, in set_window_size\n    self.set_window_rect(width=int(width), height=int(height))\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 1033, in set_window_rect\n    return self.execute(Command.SET_WINDOW_RECT, {\"x\": x, \"y\": y, \"width\": width, \"height\": height})[\"value\"]\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py\", line 440, in execute\n    self.error_handler.check_response(response)\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py\", line 245, in check_response\n    raise exception_class(message, screen, stacktrace)\n"}, "start": 1689626075851, "stop": 1689626075944}], "start": 1689626075851, "stop": 1689626075950, "uuid": "84a0562f-fc91-42ea-9db6-2242ed32d407", "historyId": "fd9930532373ce8080ff335f6c309eaf", "testCaseId": "267ad1994ab712361545180c4a21d3b1", "fullName": "tests.test_signup#test_with_invalid_email", "labels": [{"name": "feature", "value": "Signing up with invalid credentials"}, {"name": "story", "value": "Verify that an appropriate error message is displayed and still on same url"}, {"name": "tag", "value": "web"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_signup"}, {"name": "host", "value": "LAPTOP-OFQSKCIR"}, {"name": "thread", "value": "13016-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_signup"}]}