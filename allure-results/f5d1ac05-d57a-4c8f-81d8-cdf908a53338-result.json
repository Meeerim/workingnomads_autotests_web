{"name": "test_successful_login", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 30.0s, while waiting for:\nbrowser.element(('css selector', '[name=login]')).type: skmeerim1999@gmail.com\n\nReason: ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\n#0 0x55c3d188f013 <unknown>\n#1 0x55c3d15f189f <unknown>\n#2 0x55c3d162241e <unknown>\n#3 0x55c3d1621a10 <unknown>\n#4 0x55c3d1645932 <unknown>\n#5 0x55c3d161c6d3 <unknown>\n#6 0x55c3d1645a3e <unknown>\n#7 0x55c3d1658b94 <unknown>\n#8 0x55c3d1645823 <unknown>\n#9 0x55c3d161b08a <unknown>\n#10 0x55c3d161c1e5 <unknown>\n#11 0x55c3d18bce5d <unknown>\n#12 0x55c3d18d6061 <unknown>\n#13 0x55c3d18bebb5 <unknown>\n#14 0x55c3d18d6e08 <unknown>\n#15 0x55c3d18b22f0 <unknown>\n#16 0x55c3d18f2988 <unknown>\n#17 0x55c3d18f2b08 <unknown>\n#18 0x55c3d190c5dd <unknown>\n#19 0x7fc076556609 <unknown>\n\nScreenshot: file://C:\\Users\\skmee\\.selene\\screenshots\\1689782943933\\1689782943936.png\nPageSource: file://C:\\Users\\skmee\\.selene\\screenshots\\1689782943933\\1689782943936.html", "trace": "fn = <selene.core.wait.Command object at 0x0000020B1F92ABD0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n>               return fn(self.entity)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py:119: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selene.core.wait.Command object at 0x0000020B1F92ABD0>, entity = <selene.core.entity.Element object at 0x0000020B1F92BF50>\n\n    def __call__(self, entity: E) -> R:\n>       return self._fn(entity)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nelement = <selene.core.entity.Element object at 0x0000020B1F92BF50>\n\n    def fn(element: Element):\n        if self.config.wait_for_no_overlap_found_by_js:\n            webelement = element._actual_not_overlapped_webelement\n        else:\n            webelement = element()\n>       webelement.send_keys(str(text))\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\entity.py:455: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"b9733259665b4e94f05bcb387dd8bfd2\", element=\"6bac7fc5-97b9-433b-bdcd-edb1fbc8f106\")>\nvalue = ('skmeerim1999@gmail.com',), local_files = [None]\n\n    def send_keys(self, *value) -> None:\n        \"\"\"Simulates typing into the element.\n    \n        :Args:\n            - value - A string for typing, or setting form fields.  For setting\n              file inputs, this could be a local file path.\n    \n        Use this to send simple key events or to fill out form fields::\n    \n            form_textfield = driver.find_element(By.NAME, 'username')\n            form_textfield.send_keys(\"admin\")\n    \n        This can also be used to set file inputs.\n    \n        ::\n    \n            file_input = driver.find_element(By.NAME, 'profilePic')\n            file_input.send_keys(\"path/to/profilepic.gif\")\n            # Generally it's better to wrap the file path in one of the methods\n            # in os.path to return the actual path to support cross OS testing.\n            # file_input.send_keys(os.path.abspath(\"path/to/profilepic.gif\"))\n        \"\"\"\n        # transfer file to another machine only if remote driver is used\n        # the same behaviour as for java binding\n        if self.parent._is_remote:\n            local_files = list(\n                map(\n                    lambda keys_to_send: self.parent.file_detector.is_local_file(str(keys_to_send)),\n                    \"\".join(map(str, value)).split(\"\\n\"),\n                )\n            )\n            if None not in local_files:\n                remote_files = []\n                for file in local_files:\n                    remote_files.append(self._upload(file))\n                value = \"\\n\".join(remote_files)\n    \n>       self._execute(\n            Command.SEND_KEYS_TO_ELEMENT, {\"text\": \"\".join(keys_to_typing(value)), \"value\": keys_to_typing(value)}\n        )\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:231: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webelement.WebElement (session=\"b9733259665b4e94f05bcb387dd8bfd2\", element=\"6bac7fc5-97b9-433b-bdcd-edb1fbc8f106\")>\ncommand = 'sendKeysToElement'\nparams = {'id': '6bac7fc5-97b9-433b-bdcd-edb1fbc8f106', 'text': 'skmeerim1999@gmail.com', 'value': ['s', 'k', 'm', 'e', 'e', 'r', ...]}\n\n    def _execute(self, command, params=None):\n        \"\"\"Executes a command against the underlying HTML element.\n    \n        Args:\n          command: The name of the command to _execute as a string.\n          params: A dictionary of named parameters to send with the command.\n    \n        Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        if not params:\n            params = {}\n        params[\"id\"] = self._id\n>       return self._parent.execute(command, params)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webelement.py:404: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.webdriver.WebDriver (session=\"b9733259665b4e94f05bcb387dd8bfd2\")>, driver_command = 'sendKeysToElement'\nparams = {'id': '6bac7fc5-97b9-433b-bdcd-edb1fbc8f106', 'text': 'skmeerim1999@gmail.com', 'value': ['s', 'k', 'm', 'e', 'e', 'r', ...]}\n\n    def execute(self, driver_command: str, params: dict = None) -> dict:\n        \"\"\"Sends a command to be executed by a command.CommandExecutor.\n    \n        :Args:\n         - driver_command: The name of the command to execute as a string.\n         - params: A dictionary of named parameters to send with the command.\n    \n        :Returns:\n          The command's JSON response loaded into a dictionary object.\n        \"\"\"\n        params = self._wrap_value(params)\n    \n        if self.session_id:\n            if not params:\n                params = {\"sessionId\": self.session_id}\n            elif \"sessionId\" not in params:\n                params[\"sessionId\"] = self.session_id\n    \n        response = self.command_executor.execute(driver_command, params)\n        if response:\n>           self.error_handler.check_response(response)\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000020B1F6B81D0>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"element not interactable\",\"message\":\"element not interactable\\\\n  (Sessio...\\\\n#17 0x55c3d18f2b08 \\\\u003Cunknown>\\\\n#18 0x55c3d190c5dd \\\\u003Cunknown>\\\\n#19 0x7fc076556609 \\\\u003Cunknown>\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.ElementNotInteractableException: Message: element not interactable\nE         (Session info: chrome=100.0.4896.60)\nE       Stacktrace:\nE       #0 0x55c3d188f013 <unknown>\nE       #1 0x55c3d15f189f <unknown>\nE       #2 0x55c3d162241e <unknown>\nE       #3 0x55c3d1621a10 <unknown>\nE       #4 0x55c3d1645932 <unknown>\nE       #5 0x55c3d161c6d3 <unknown>\nE       #6 0x55c3d1645a3e <unknown>\nE       #7 0x55c3d1658b94 <unknown>\nE       #8 0x55c3d1645823 <unknown>\nE       #9 0x55c3d161b08a <unknown>\nE       #10 0x55c3d161c1e5 <unknown>\nE       #11 0x55c3d18bce5d <unknown>\nE       #12 0x55c3d18d6061 <unknown>\nE       #13 0x55c3d18bebb5 <unknown>\nE       #14 0x55c3d18d6e08 <unknown>\nE       #15 0x55c3d18b22f0 <unknown>\nE       #16 0x55c3d18f2988 <unknown>\nE       #17 0x55c3d18f2b08 <unknown>\nE       #18 0x55c3d190c5dd <unknown>\nE       #19 0x7fc076556609 <unknown>\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: ElementNotInteractableException\n\nDuring handling of the above exception, another exception occurred:\n\n    @allure.tag(\"web\")\n    @allure.feature(f'Sign in')\n    @allure.story(\"Successful login and expected redirection of URL\")\n    def test_successful_login():\n        with allure.step('Select login and enter an valid username and password'):\n            app.user_log_in.open() \\\n>               .fill_email(user.email) \\\n                .fill_password(user.password) \\\n                .login_button()\n\ntests\\test_login.py:25: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nworkingnomads_autotests_web\\model\\pages\\user_log_in_page.py:10: in fill_email\n    browser.element('[name=login]').type(email)\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\entity.py:459: in type\n    self.wait.for_(\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py:143: in for_\n    return self._decorator(self)(logic)(fn)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nfn = <selene.core.wait.Command object at 0x0000020B1F92ABD0>\n\n    def logic(fn: Callable[[E], R]) -> R:\n        finish_time = time.time() + self._timeout\n    \n        while True:\n            try:\n                return fn(self.entity)\n            except Exception as reason:\n                if time.time() > finish_time:\n                    reason_message = str(reason)\n    \n                    reason_string = '{name}: {message}'.format(\n                        name=reason.__class__.__name__,\n                        message=reason_message,\n                    )\n                    # TODO: think on how can we improve logging failures in selene, e.g. reverse msg and stacktrace\n                    # stacktrace = getattr(reason, 'stacktrace', None)\n                    timeout = self._timeout\n                    entity = self.entity\n    \n                    failure = TimeoutException(\n                        f'\\n'\n                        f'\\nTimed out after {timeout}s, while waiting for:'\n                        f'\\n{entity}.{fn}'\n                        f'\\n'\n                        f'\\nReason: {reason_string}'\n                    )\n    \n>                   raise self._hook_failure(failure)\nE                   selene.core.exceptions.TimeoutException: Message: \nE                   \nE                   Timed out after 30.0s, while waiting for:\nE                   browser.element(('css selector', '[name=login]')).type: skmeerim1999@gmail.com\nE                   \nE                   Reason: ElementNotInteractableException: Message: element not interactable\nE                     (Session info: chrome=100.0.4896.60)\nE                   Stacktrace:\nE                   #0 0x55c3d188f013 <unknown>\nE                   #1 0x55c3d15f189f <unknown>\nE                   #2 0x55c3d162241e <unknown>\nE                   #3 0x55c3d1621a10 <unknown>\nE                   #4 0x55c3d1645932 <unknown>\nE                   #5 0x55c3d161c6d3 <unknown>\nE                   #6 0x55c3d1645a3e <unknown>\nE                   #7 0x55c3d1658b94 <unknown>\nE                   #8 0x55c3d1645823 <unknown>\nE                   #9 0x55c3d161b08a <unknown>\nE                   #10 0x55c3d161c1e5 <unknown>\nE                   #11 0x55c3d18bce5d <unknown>\nE                   #12 0x55c3d18d6061 <unknown>\nE                   #13 0x55c3d18bebb5 <unknown>\nE                   #14 0x55c3d18d6e08 <unknown>\nE                   #15 0x55c3d18b22f0 <unknown>\nE                   #16 0x55c3d18f2988 <unknown>\nE                   #17 0x55c3d18f2b08 <unknown>\nE                   #18 0x55c3d190c5dd <unknown>\nE                   #19 0x7fc076556609 <unknown>\nE                   \nE                   Screenshot: file://C:\\Users\\skmee\\.selene\\screenshots\\1689782943933\\1689782943936.png\nE                   PageSource: file://C:\\Users\\skmee\\.selene\\screenshots\\1689782943933\\1689782943936.html\n\n..\\..\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py:141: TimeoutException"}, "steps": [{"name": "Select login and enter an valid username and password", "status": "failed", "statusDetails": {"message": "selene.core.exceptions.TimeoutException: Message: \n\nTimed out after 30.0s, while waiting for:\nbrowser.element(('css selector', '[name=login]')).type: skmeerim1999@gmail.com\n\nReason: ElementNotInteractableException: Message: element not interactable\n  (Session info: chrome=100.0.4896.60)\nStacktrace:\n#0 0x55c3d188f013 <unknown>\n#1 0x55c3d15f189f <unknown>\n#2 0x55c3d162241e <unknown>\n#3 0x55c3d1621a10 <unknown>\n#4 0x55c3d1645932 <unknown>\n#5 0x55c3d161c6d3 <unknown>\n#6 0x55c3d1645a3e <unknown>\n#7 0x55c3d1658b94 <unknown>\n#8 0x55c3d1645823 <unknown>\n#9 0x55c3d161b08a <unknown>\n#10 0x55c3d161c1e5 <unknown>\n#11 0x55c3d18bce5d <unknown>\n#12 0x55c3d18d6061 <unknown>\n#13 0x55c3d18bebb5 <unknown>\n#14 0x55c3d18d6e08 <unknown>\n#15 0x55c3d18b22f0 <unknown>\n#16 0x55c3d18f2988 <unknown>\n#17 0x55c3d18f2b08 <unknown>\n#18 0x55c3d190c5dd <unknown>\n#19 0x7fc076556609 <unknown>\n\nScreenshot: file://C:\\Users\\skmee\\.selene\\screenshots\\1689782943933\\1689782943936.png\nPageSource: file://C:\\Users\\skmee\\.selene\\screenshots\\1689782943933\\1689782943936.html\n\n", "trace": "  File \"C:\\Users\\skmee\\PycharmProjects\\workingnomads_autotests_web\\tests\\test_login.py\", line 25, in test_successful_login\n    .fill_email(user.email) \\\n     ^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\skmee\\PycharmProjects\\workingnomads_autotests_web\\workingnomads_autotests_web\\model\\pages\\user_log_in_page.py\", line 10, in fill_email\n    browser.element('[name=login]').type(email)\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\entity.py\", line 459, in type\n    self.wait.for_(\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py\", line 143, in for_\n    return self._decorator(self)(logic)(fn)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n  File \"C:\\Users\\skmee\\AppData\\Local\\Programs\\Python\\Python311\\Lib\\site-packages\\selene\\core\\wait.py\", line 141, in logic\n    raise self._hook_failure(failure)\n"}, "start": 1689783086509, "stop": 1689783120626}], "start": 1689783086509, "stop": 1689783120657, "uuid": "8fe0a6b8-482a-43d4-b2df-caefb965ae7c", "historyId": "c52714b8b147663391116672566fcdce", "testCaseId": "f4e42ed032845b0ed5c71539b726bc6e", "fullName": "tests.test_login#test_successful_login", "labels": [{"name": "story", "value": "Successful login and expected redirection of URL"}, {"name": "tag", "value": "web"}, {"name": "feature", "value": "Sign in"}, {"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_login"}, {"name": "host", "value": "LAPTOP-OFQSKCIR"}, {"name": "thread", "value": "12944-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_login"}]}